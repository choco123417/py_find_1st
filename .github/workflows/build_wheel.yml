# .github/workflows/build_wheels.yml

name: Build Python Wheels

on:
  push:
    branches:
      - main # Or your default branch (master)
    tags:
      - 'v*' # Trigger on tags like v1.0, v1.1.0, etc. (for releases)
  pull_request:
    branches:
      - main # Or your default branch

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      # This matrix defines the different environments to build in
      # py-find-1st builds for specific python versions due to numpy compatibility
      # and the C extension. Adjust these as needed.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"] # Adjust Python versions based on your needs and py-find-1st support
        
        # Exclude combinations that are known to not work or are not needed
        # For example, if py-find-1st doesn't officially support older Python on certain OS
        exclude:
          - os: macos-latest
            python-version: "3.8" # Example: if older macOS runners or python don't support it well

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Use the latest checkout action

      - name: Set up Python
        # cibuildwheel will handle specific Python versions, but this sets up a base
        # for `pip` and `cibuildwheel` itself.
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.x.x # Pin to a major version of cibuildwheel
          # For py-find-1st, you might need numpy during the build
          # cibuildwheel handles this for most common cases, but if you hit issues,
          # explicitly pre-installing numpy might help on some exotic configurations.
          # pip install numpy

      - name: Build wheels
        # CIBUILDWHEEL_BUILD_ISOLATED prevents contamination from previous steps
        # This is a key step where cibuildwheel takes over.
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS_WINDOWS: AMD64 # Explicitly build for 64-bit on Windows
          # CIBW_SKIP: "cp37-* pp*-*" # Example: skip certain Python versions or interpreters
          # CIBW_BUILD: "cp39-*" # Example: only build for CPython 3.9
          # CIBW_BEFORE_BUILD: "pip install numpy" # Example: Run commands before build

      - name: Upload wheels to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-for-py-find-1st-${{ matrix.os }}-${{ matrix.python-version }}
          path: wheelhouse/*.whl # Upload all .whl files from the wheelhouse directory

      # Optional: Publish to PyPI
      # This step would typically only run on tags (releases)
      # You need to set up a PyPI API token as a GitHub Secret (PYPI_API_TOKEN)
      # and configure PyPI as a "Trusted Publisher" for your repository.
      # See https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }} # Ensure this secret is set up in your repo
          # repository_url: https://test.pypi.org/legacy/ # Use this for TestPyPI
